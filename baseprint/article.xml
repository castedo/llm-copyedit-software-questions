<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN"
                  "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
</journal-title-group>
<issn></issn>
<publisher>
<publisher-name></publisher-name>
</publisher>
</journal-meta>
<article-meta>
<permissions>
</permissions>
</article-meta>
</front>
<body>
<sec id="questions-for-journal-editors-on-llm-copyediting-software">
  <title>Questions for Journal Editors on LLM Copyediting Software</title>
  <sec id="motivation">
    <title>Motivation</title>
    <p>LLM copyediting software can implement features that help authors be more transparent to
    journals as to how they have used an LLM in the writing of a manuscript.
    The development and documentation of these features can achieve higher utility if guided
    by the following questions for journals editors.
    These questions are about three types of disclosure enabled by a particular
    manuscript writing approach. This approach consists of writing a manuscript</p>
    <list list-type="bullet">
      <list-item>
        <p>with source text files, such as LaTeX or Markdown,</p>
      </list-item>
      <list-item>
        <p>saving them with source version control, such as Git [], and</p>
      </list-item>
      <list-item>
        <p>improving the text with LLM copyediting software, such as Manubot AI Editor [1][2], and spin-off CopyAid [3].</p>
      </list-item>
    </list>
    <p>LLM copyediting sofotware takes chunks of text from an existing manuscript
    together with canned instructions such as “Revise the text received” and sends them
    together to an LLM so that the response become a new revised alternative chunk of text
    for the manuscript.</p>
  </sec>
  <sec id="first-type-of-disclosure">
    <title>First Type Of Disclosure</title>
    <p>This first type of disclosure corresponds to what the GSA journals currently
    request of authors:
    “full technical specifications of the LLM used (name, version, model, source) and method
    of application (query structure, syntax)” [4].</p>
    <p>CopyAid currently outputs files that we can name “method specification files”, using the
    language of the GSA guideline.
    Here is an example such a file output by CopyAid when an author chooses the “proofread”
    instruction:</p>
    <p>https://gitlab.com/castedo/copyaid/-/raw/68647e9c9439159259e6a282ccd0de5c15aea944/copyaid/config/proofread.toml</p>
    <p>Authors can choose other CopyAid instructions such as “heavy” which output a slightly
    different “method specification file”:</p>
    <p>https://gitlab.com/castedo/copyaid/-/raw/68647e9c9439159259e6a282ccd0de5c15aea944/copyaid/config/heavy.toml</p>
  </sec>
  <sec id="second-type-of-disclosure">
    <title>Second Type Of Disclosure</title>
    <p>The second type of disclosure is the full history of all edits done by the human authors. These edits
    are saved as “commits” in Git terminology. An example is the history of hundreds of
    commits for publication https://doi.org/10.1098/rsif.2017.0387 []:</p>
    <p>[] https://github.com/greenelab/deep-review/commits/master/</p>
    <p>An example individual commit (saved edit) is:</p>
    <p>[] https://github.com/greenelab/deep-review/commit/081fb466dd13c2813b3ae14bb916173f5d0442c5?diff=split</p>
    <p>The second type of disclosure provides transparency on saved edits that are clearly
    crafted by humans and not mindlessly generated by an LLM.</p>
    <p>These histories can be easily and automatically archived in the Software Heritage
    Archive with archival time stamps outside the control of the authors:</p>
    <p>https://archive.softwareheritage.org/browse/origin/visits/?origin_url=https://github.com/greenelab/deep-review</p>
  </sec>
  <sec id="third-type-of-disclosure">
    <title>Third Type Of Disclosure</title>
    <p>The third type of disclosure is similar to the second type, but for LLM suggested edits,
    not changes saved by a human.
    This functionality is featured by Manubot AI Editor. Example edits can be seen in these four
    diagrams from the paper about Manubot AI Editor:</p>
    <p>https://greenelab.github.io/manubot-gpt-manuscript/#fig:intro:ccc
    https://greenelab.github.io/manubot-gpt-manuscript/#fig:discussion:ccc
    https://greenelab.github.io/manubot-gpt-manuscript/#fig:methods:phenoplier
    https://greenelab.github.io/manubot-gpt-manuscript/#fig:methods:manubotai</p>
    <p>Like with human edits recorded as Git commits, LLL-generated edits can also be recorded
    as Git commits.</p>
  </sec>
  <sec id="main-question">
    <title>Main Question</title>
    <p>Given that the GSA already requests the information in a “method specification file”, we
    assume journal editors would like LLM copyediting software to facilitate authors
    submitting them.</p>
    <p>Popular Git services, like GitHub, and the Software Heritage Archive already provide
    pages which list and link to the human edits.</p>
    <p>For a given “method specification file”, the third type of disclosure can be actual edits suggested by the LLM on actual
    past drafts of the manuscript or they can be edits suggested on a canonical frequently
    used example, such as a classic genetics paper of the past.</p>
    <p>Q1) What would be of greater utility to journal editors, seeing the kind of edits
    suggested on a canonical classic example for the “method specification files used,
    or the actual edits suggested on past drafts?</p>
    <p>Q2) If you think actual suggested edits on past drafts is more useful than suggested
    edits on a canonical classic example,
    this third type of disclosure can be a short list or an exhaustive list of LLM
    suggested edits. Human authors do not choose to incorporate all edits suggested by an
    LLM. A short list would consist of tens of selected paragraph revisions,
    whereas an exhaustive list would consist of almost all LLM suggested edits, which would
    be hundreds of revised paragraphs, even if a human author does not use them.
    Would you find a short list or an exhaustive list more useful?</p>
    <p>Q3) How much utility do journal editors find in also having the third type of
    disclosure, given the first and second types of disclosures are already available?</p>
  </sec>
  <sec id="terminology-questions">
    <title>Terminology Questions</title>
    <p>Q2) The GSA journals use the term “language editing” as a suggested pre-submission
    activity. Do you think “LLM language editing” is a better description rather than “LLM
    copyediting” for the function performed by the software referenced by these questions?</p>
    <p>Q3) Is there an alternative term than “method specification file” that you think
    is a more understandable name for the file described in the first type of disclosure?</p>
    <p>Q4) Are the any names you can suggest for a file that
    ists and links to the edits of the SECOND type of disclosure (saved edits by a human)?</p>
    <p>Q5) Are the any names you can suggest for a file that lists and links to the THIRD type
    of disclosure (suggested edits by an LLM copyediting software)?</p>
    <p>[] https://en.wikipedia.org/wiki/Git</p>
    <p>[] https://academic.oup.com/genetics/pages/general-instructions</p>
  </sec>
</sec>
</body>
<back>
</back>
</article>
